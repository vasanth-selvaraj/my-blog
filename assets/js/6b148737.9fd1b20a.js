"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[389],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?i.createElement(f,r(r({ref:n},l),{},{components:t})):i.createElement(f,r({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[m]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const o={title:"Optimizing Performance in React Applications",description:"Optimizing Performance in React Applications",slug:"optimizing-performance-in-react-applications",authors:"Vasanth",tags:["React","JavaScript","Begginer","Optimizing"],enableComments:!0},r="Optimizing Performance in React Applications",s={permalink:"/optimizing-performance-in-react-applications",source:"@site/blog/2024-04-05/optimizing-performance-in-react-applications.mdx",title:"Optimizing Performance in React Applications",description:"Optimizing Performance in React Applications",date:"2024-04-05T00:00:00.000Z",formattedDate:"April 5, 2024",tags:[{label:"React",permalink:"/tags/react"},{label:"JavaScript",permalink:"/tags/java-script"},{label:"Begginer",permalink:"/tags/begginer"},{label:"Optimizing",permalink:"/tags/optimizing"}],readingTime:1.39,hasTruncateMarker:!0,authors:[{name:"Vasanth Selvaraj",title:"Full Stack Developer | Agile | MERN | DevOps",url:"https://vasanth.tech",imageURL:"https://vasanth.tech/_next/static/media/memoji.396c05ff.png",key:"Vasanth"}],frontMatter:{title:"Optimizing Performance in React Applications",description:"Optimizing Performance in React Applications",slug:"optimizing-performance-in-react-applications",authors:"Vasanth",tags:["React","JavaScript","Begginer","Optimizing"],enableComments:!0},nextItem:{title:"Understanding React Lifecycle Methods in Functional and Class Components",permalink:"/react-lifecycle-methods-functional-class"}},p={authorsImageUrls:[void 0]},c=[{value:"Minimize Re-renders with React.memo",id:"minimize-re-renders-with-reactmemo",level:3},{value:"Use React.lazy and Suspense for Code Splitting",id:"use-reactlazy-and-suspense-for-code-splitting",level:3},{value:"Memoize Expensive Computations with useMemo",id:"memoize-expensive-computations-with-usememo",level:3},{value:"Optimize Context Providers",id:"optimize-context-providers",level:3},{value:"Use PureComponent for Class Components",id:"use-purecomponent-for-class-components",level:3},{value:"Avoid Inline Functions in Render",id:"avoid-inline-functions-in-render",level:3}],l={toc:c},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Performance optimization is crucial for ensuring that React applications are fast and responsive, providing a smooth user experience.\nIn this article, we'll explore various techniques and best practices for optimizing the performance of React applications."),(0,a.kt)("h3",{id:"minimize-re-renders-with-reactmemo"},"Minimize Re-renders with React.memo"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"React.memo")," is a higher-order component that memoizes a functional component, preventing unnecessary re-renders when the component's props have not changed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const MemoizedComponent = React.memo(MyComponent);\n")),(0,a.kt)("h3",{id:"use-reactlazy-and-suspense-for-code-splitting"},"Use React.lazy and Suspense for Code Splitting"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"React.lazy")," allows you to load components dynamically, which can improve initial load times by splitting your bundle into smaller chunks.\nSuspense can be used to handle the loading state of lazily loaded components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const LazyComponent = React.lazy(() => import('./LazyComponent'));\n<Suspense fallback={<div>Loading...</div>}>\n  <LazyComponent />\n</Suspense>\n")),(0,a.kt)("h3",{id:"memoize-expensive-computations-with-usememo"},"Memoize Expensive Computations with useMemo"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useMemo")," is a hook that memoizes the result of a function, preventing expensive calculations from being re-executed on every render."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const memoizedValue = useMemo(() => expensiveFunction(a, b), [a, b]);\n")),(0,a.kt)("h3",{id:"optimize-context-providers"},"Optimize Context Providers"),(0,a.kt)("p",null,"Avoid unnecessary re-renders caused by context value changes by memoizing context providers using ",(0,a.kt)("inlineCode",{parentName:"p"},"useMemo"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const MemoizedContextProvider = React.memo(ContextProvider);\n")),(0,a.kt)("h3",{id:"use-purecomponent-for-class-components"},"Use PureComponent for Class Components"),(0,a.kt)("p",null,"PureComponent in class components performs a shallow comparison of props and state to prevent re-renders if no changes are detected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"class MyComponent extends React.PureComponent {\n  // Component implementation\n}\n")),(0,a.kt)("h3",{id:"avoid-inline-functions-in-render"},"Avoid Inline Functions in Render"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const handleClick = useCallback(() => {\n  // Handle click\n}, []);\n<button onClick={handleClick}>Click Me</button>\n")),(0,a.kt)("p",null,"By following these techniques and best practices, you can significantly improve the performance of your React applications. It's important to profile and measure the performance impact of these optimizations to ensure they are providing the desired improvements."))}u.isMDXComponent=!0}}]);